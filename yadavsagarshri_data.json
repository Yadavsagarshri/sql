{"username":"yadavsagarshri","email":"yadavsagarshri@gmail.com","country":"India","company":"","name":"Sagar Yadav","city":"Delhi","website":"","job_title":"","tsize":"XL","country_of_residence":"India","phone_number":"9997730690","address":"1864,moh tihai, Preetnagar,Mawana","github_url":"https://github.com/Yadavsagarshri","gh_uid":"142936827","li_uid":"CjYVTXZxQC","linkedin_url":"https://www.linkedin.com/in/sagar-yadav-2b3b2119b/","personal_first_name":"Sagar","personal_last_name":"Yadav","graduation_year":"2023","address_city":"Meerut","address_state":"Uttar Pradesh","address_zip":"250401","timezone":"Asia/Calcutta","is_professional":true,"jobs_headline":"Data analyst","hackos":437,"phone":{"country_code":"+91","number":"9997730690"},"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[],"snippets":[],"submissions":[{"contest":"Master","challenge":"Revising the Select Query I","code":"select * from CITY\nwhere POPULATION \u003e 100000 and COUNTRYCODE = 'USA'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Revising the Select Query II","code":"SELECT NAME FROM CITY\nWHERE POPULATION \u003e 120000 AND COUNTRYCODE = 'USA'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Select All","code":"SELECT * FROM CITY;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Select By ID","code":"SELECT * FROM CITY\nWHERE ID = 1661\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Japanese Cities' Attributes","code":"SELECT * FROM CITY\nWHERE COUNTRYCODE = 'JPN'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Japanese Cities' Names","code":"SELECT NAME FROM CITY\nWHERE COUNTRYCODE = 'JPN'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Japanese Cities' Names","code":"SELECT NAME FROM CITY\nWHERE COUNTRYCODE = 'JPN'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 1","code":"/*\nEnter your query here.\n*/SELECT CITY, STATE FROM STATION","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 3","code":"/*\nEnter your query here.\n*/SELECT DISTINCT CITY \nFROM STATION\nWHERE MOD(ID, 2)= 0\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 4","code":"SELECT\n      COUNT(CITY) - COUNT(DISTINCT CITY) AS DIFFERENCE\nFROM\n     STATION;\n      ","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 5","code":"/*\nEnter your query here.\n*/\nSELECT\n      CITY,\n      LENGTH(CITY) AS LENGTH\nFROM\n      STATION\nORDER BY \n      LENGTH(CITY) ASC, CITY ASC\n      LIMIT 1;\nSELECT CITY, LENGTH(CITY) AS LENGTH\nFROM STATION \nORDER BY LENGTH(CITY) DESC, CITY ASC\nLIMIT 1;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 6","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION\nWHERE CITY LIKE 'A%' \n   OR CITY LIKE 'E%' \n   OR CITY LIKE 'I%' \n   OR CITY LIKE 'O%'\n   OR CITY LIKE 'U%'\n   ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 7","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY\nFROM STATION\nWHERE CITY LIKE '%A'\n   OR CITY LIKE '%E'\n   OR CITY LIKE '%I'\n   OR CITY LIKE '%O'\n   OR CITY LIKE '%U'\n   ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 8","code":"/*\nEnter your query here.\n*/ SELECT CITY FROM STATION \nWHERE (CITY LIKE 'A%'\n   OR CITY LIKE 'E%'\n   OR CITY LIKE 'I%'\n   OR CITY LIKE 'U%'\n   OR CITY LIKE 'O%')\n   AND (CITY LIKE '%A'\n   OR CITY LIKE '%E'\n   OR CITY LIKE '%I'\n   OR CITY LIKE '%U'\n   OR CITY LIKE '%O')\n   ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 8","code":"/*\nEnter your query here.\n*/ SELECT CITY FROM STATION \nWHERE (CITY LIKE 'A%'\n   OR CITY LIKE 'E%'\n   OR CITY LIKE 'I%'\n   OR CITY LIKE 'U%'\n   OR CITY LIKE 'O%')\n   AND (CITY LIKE '%A'\n   OR CITY LIKE '%E'\n   OR CITY LIKE '%I'\n   OR CITY LIKE '%U'\n   OR CITY LIKE '%O')\n   ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 9","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION\nWHERE CITY NOT LIKE 'A%'\n  AND CITY NOT LIKE 'E%'\n  AND CITY NOT LIKE 'I%'\n  AND CITY NOT LIKE 'O%'\n  AND CITY NOT LIKE 'U%'\n  ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 10","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION\nWHERE CITY NOT LIKE '%A'\n  AND CITY NOT LIKE '%E'\n  AND CITY NOT LIKE '%I'\n  AND CITY NOT LIKE '%O'\n  AND CITY NOT LIKE '%U'\n  ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 11","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION\nWHERE (CITY NOT LIKE '%A'\n  AND CITY NOT LIKE '%E'\n  AND CITY NOT LIKE '%I'\n  AND CITY NOT LIKE '%O'\n  AND CITY NOT LIKE '%U')\n  OR (CITY NOT LIKE 'A%'\n  AND CITY NOT LIKE 'E%'\n  AND CITY NOT LIKE 'I%'\n  AND CITY NOT LIKE 'O%'\n  AND CITY NOT LIKE 'U%')\n  ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 12","code":"/*\nEnter your query here.\n*/\nSELECT DISTINCT CITY FROM STATION\nWHERE CITY NOT LIKE 'A%'\n  AND CITY NOT LIKE 'E%'\n  AND CITY NOT LIKE 'I%'\n  AND CITY NOT LIKE 'O%'\n  AND CITY NOT LIKE 'U%'\n  AND CITY NOT LIKE '%A'\n  AND CITY NOT LIKE '%E'\n  AND CITY NOT LIKE '%I'\n  AND CITY NOT LIKE '%O'\n  AND CITY NOT LIKE '%U'\n  ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Higher Than 75 Marks","code":"/*\nEnter your query here.\n*/\nSELECT Name \nFROM STUDENTS\nWHERE Marks \u003e 75\nORDER BY RIGHT(Name,3), ID\n;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Employee Names","code":"/*\nEnter your query here.\n*/\nselect name as employee_name\nfrom Employee\norder by name asc\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Employee Salaries","code":"/*\nEnter your query here.\n*/\nselect name from Employee\nwhere salary \u003e 2000\nand months \u003c 10\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Type of Triangle","code":"SELECT\nCASE \n    WHEN A = B AND B = C THEN 'Equilateral'\n    WHEN A = B OR B = C OR A = C THEN 'Isosceles'\n    WHEN A + B \u003c= C OR B + C \u003c= A OR A + C \u003c= B THEN 'Not A Triangle'\n    ELSE 'Scalene' \nEND\nFROM TRIANGLES;","score":0.0,"language":"mysql"},{"contest":"Master","challenge":"Type of Triangle","code":"SELECT\nCASE \n    WHEN A = B AND B = C THEN 'Equilateral'\n    WHEN A = B OR B = C OR A = C  THEN 'Isosceles'\n    WHEN A + B \u003c= C OR B + C \u003c= A OR A + C \u003c= B THEN 'Not A Triangle'\n    ELSE 'Scalene' \nEND\nFROM TRIANGLES;","score":0.0,"language":"mysql"},{"contest":"Master","challenge":"Type of Triangle","code":"SELECT\nCASE \n    WHEN A + B \u003c= C OR B + C \u003c= A OR A + C \u003c= B THEN 'Not A Triangle'\n    WHEN A = B AND B = C THEN 'Equilateral'\n    WHEN A = B OR B = C OR A = C  THEN 'Isosceles'\n    \n    ELSE 'Scalene' \nEND\nFROM TRIANGLES;","score":0.0,"language":"tsql"},{"contest":"Master","challenge":"Type of Triangle","code":"SELECT\nCASE \n    WHEN A + B \u003c= C OR B + C \u003c= A OR A + C \u003c= B THEN 'Not A Triangle'\n    WHEN A = B AND B = C THEN 'Equilateral'\n    WHEN A = B OR B = C OR A = C  THEN 'Isosceles'\n    \n    ELSE 'Scalene' \nEND\nFROM TRIANGLES;","score":1.0,"language":"tsql"},{"contest":"Master","challenge":"The PADS","code":"WITH Occupation_name AS (\n    select concat(name,'(', left(Occupation,1), ')') as Display_name\n    from OCCUPATIONS\n)\nselect Display_name\nfrom Occupation_name\nunion all\nselect\n     concat(\n         'There are a total of ', count(Occupation), ' ', lower(Occupation), 's.'\n     ) as Occupation_count\n     from OCCUPATIONS\ngroup by Occupation\norder by\n case when Display_name like '%)' then 1 else 2 end,\n Display_name;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Top Earners","code":"SELECT \n    MAX(months * salary) AS max_total_earnings,\n    COUNT(*) AS num_employees_with_max_earnings\nFROM \n    Employee\nWHERE \n    months * salary = (\n        SELECT \n            MAX(months * salary)\n        FROM \n            Employee\n    );\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Occupations","code":"/*\nEnter your query here.\n*/","score":0.0,"language":"mysql"},{"contest":"Master","challenge":"Occupations","code":"SELECT \n    MAX(CASE WHEN Occupation = 'Doctor' THEN Name END) AS Doctor,\n    MAX(CASE WHEN Occupation = 'Professor' THEN Name END) AS Professor,\n    MAX(CASE WHEN Occupation = 'Singer' THEN Name END) AS Singer,\n    MAX(CASE WHEN Occupation = 'Actor' THEN Name END) AS Actor\nFROM (\n    SELECT \n        Name,\n        Occupation,\n        @row_number := CASE WHEN @prev_occ = Occupation THEN @row_number + 1 ELSE 1 END AS rn,\n        @prev_occ := Occupation\n    FROM \n        OCCUPATIONS\n    CROSS JOIN (SELECT @row_number := 0, @prev_occ := '') AS vars\n    ORDER BY \n        Occupation, Name\n) AS ranked\nGROUP BY \n    rn;\n\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Revising Aggregations - The Count Function","code":"select count(ID) from CITY where population\u003e100000;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Revising Aggregations - The Sum Function","code":"select\n     sum(population) \n     from city \n     where\n     district = 'California';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Revising Aggregations - Averages","code":"select avg(population) from city\nwhere district = 'california';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Average Population","code":"select round(avg(population)) from city;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Japan Population","code":"select sum(population) from city\nwhere countrycode = 'jpn';","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Population Density Difference","code":"select (\n    max(population)- min(population)\n) as 'differnce'\nfrom city;\n     ","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"The Blunder","code":"SELECT \n    CEIL(AVG(Salary) - AVG(NULLIF(REPLACE(Salary, '0', ''), ''))) AS Difference\nFROM \n    EMPLOYEES;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"The Blunder","code":"SELECT \n    CEIL(AVG(Salary) - AVG(NULLIF(REPLACE(Salary, '0', ''), ''))) AS Difference\nFROM \n    EMPLOYEES;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 2","code":"/*\nEnter your query here.\n*/select round(sum(lat_n), 2) as lat,\n         round(sum(long_w), 2) as lon\n         from station;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 2","code":"/*\nEnter your query here.\n*/select round(sum(lat_n), 2) as lat,\n         round(sum(long_w), 2) as lon\n         from station;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 13","code":"/*\nEnter your query here.\n*/\nselect truncate(sum(lat_n), 4)\nfrom station\nwhere lat_n \u003e 38.7880 and lat_n \u003c 137.2345;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 13","code":"/*\nEnter your query here.\n*/\nselect truncate(sum(lat_n), 4)\nfrom station\nwhere lat_n \u003e 38.7880 and lat_n \u003c 137.2345;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 14","code":"/*\nEnter your query here.\n*/select truncate( \n    max(lat_n)\n    , 4) as greater_value\n    from station\n    where lat_n \u003c 137.2345;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 15","code":"SELECT ROUND(LONG_W,4) FROM STATION WHERE LAT_N \u003c 137.2345 ORDER BY LAT_N DESC LIMIT 1;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 15","code":"SELECT ROUND(LONG_W,4) FROM STATION WHERE LAT_N \u003c 137.2345 ORDER BY LAT_N DESC LIMIT 1;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 16","code":"/*\nEnter your query here.\n*/SELECT ROUND(LAT_N, 4) \n         FROM STATION \n         WHERE LAT_N \u003e 38.7780 \n         ORDER BY LAT_N ASC\n         LIMIT 1;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 17","code":"SELECT ROUND(LONG_W, 4)\nFROM STATION\nWHERE LAT_N = (SELECT MIN(LAT_N) AS 'MN' FROM STATION WHERE LAT_N\u003e38.7780);","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 18","code":"/*\nEnter your query here.\n*/\nselect round((\n    max(lat_n) - min(lat_n) + max(long_w) - min(long_w)), 4) as distance from station;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 19","code":"/*\nEnter your query here.\n*/\nselect round(sqrt(power(max(lat_n)-min(lat_n), 2) + power(max(long_w)- min(long_w), 2)), 4) as 'distance'\nfrom station;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Weather Observation Station 20","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/SELECT round((PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LAT_N)), 4) as median FROM STATION;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Population Census ","code":"select sum(city.POPULATION) as 'Total'\nfrom city\njoin country\non city.countrycode = country.code\nwhere country.continent = 'Asia'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"African Cities","code":"SELECT CITY.NAME\nFROM CITY \nJOIN COUNTRY\nON CITY.COUNTRYCODE = COUNTRY.CODE\nWHERE CONTINENT = 'AFRICA'\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Average Population of Each Continent","code":"SELECT COUNTRY.CONTINENT,FLOOR(\nAVG(CITY.POPULATION)) AS AVGCITYP\nFROM COUNTRY\nJOIN CITY\nON CITY.COUNTRYCODE = COUNTRY.CODE\nGROUP BY COUNTRY.CONTINENT\n;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"The Report","code":"select \ncase \n   when g.grade \u003e=8 then s.name\n   else null\nend as name,\ng.grade, \ns.marks\n  from\n    students as s join grades as g on s.marks \u003e= g.min_mark and s.marks \u003c= g.max_mark\norder by g.grade desc, name asc; \n    \n\n","score":0.0,"language":"mysql"},{"contest":"Master","challenge":"The Report","code":"select \ncase \n   when g.grade \u003e=8 then s.name\n   else null\nend as name,\ng.grade, \ns.marks\n  from\n    students as s join grades as g on s.marks \u003e= g.min_mark and s.marks \u003c= g.max_mark\norder by g.grade desc, s.name asc; \n\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Top Competitors","code":"SELECT H.hacker_id, H.name\nFROM Hackers as H\nJOIN Submissions as S ON H.hacker_id = S.hacker_id\nJOIN Challenges as C ON S.challenge_id = C.challenge_id\nWHERE S.score = (SELECT MAX(score) FROM Difficulty as D WHERE D.difficulty_level = C.difficulty_level)\nGROUP BY H.hacker_id, H.name\nHAVING COUNT(DISTINCT S.challenge_id) \u003e 1\nORDER BY COUNT(DISTINCT S.challenge_id) DESC, H.hacker_id ASC;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Ollivander's Inventory","code":"SELECT\n    w.id,\n    wp.age,\n    w.coins_needed AS min_coins_needed,\n    w.power\nFROM\n    Wands AS w\nJOIN\n    Wands_Property AS wp\n    ON w.code = wp.code\nJOIN (\n    SELECT\n        wp.age,\n        w.power,\n        MIN(w.coins_needed) AS min_coins_needed\n    FROM\n        Wands AS w\n    JOIN\n        Wands_Property AS wp\n        ON w.code = wp.code\n    WHERE\n        wp.is_evil = 0\n    GROUP BY\n        wp.age,\n        w.power\n) AS min_coins\nON\n    w.coins_needed = min_coins.min_coins_needed\n    AND wp.age = min_coins.age\n    AND w.power = min_coins.power\nORDER BY\n    w.power DESC,\n    wp.age DESC;","score":1.0,"language":"tsql"},{"contest":"Master","challenge":"Challenges","code":"with cte as ( \n    select \n        h.hacker_id, \n        h.name, \n        count(c.challenge_id) as Total_Challenge \n    from \n        hackers h \n    join \n        challenges c on h.hacker_id = c.hacker_id \n    group by \n        h.hacker_id, h.name \n    order by \n        count(c.challenge_id) desc\n)\n\nselect \n    * \nfrom \n    cte \nwhere \n    total_challenge in (\n        select \n            max(total_challenge) \n        from \n            cte\n    ) \n    or total_challenge in (\n        select \n            total_challenge \n        from \n            cte \n        group by \n            total_challenge \n        having \n            count(total_challenge) = 1\n    )\norder by \n    total_challenge desc, \n    hacker_id;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Contest Leaderboard","code":"select \n      h.hacker_id,\n      h.name,\n      sum(max_score) as total_score\nfrom\n     hackers as h\njoin      \n     (\n         select\n               hacker_id,\n               max(score) as max_score\n         from\n               submissions\n         group by\n               hacker_id, challenge_id) as \n        max_scores \non\n      h.hacker_id = max_scores.hacker_id\ngroup by \n      h.hacker_id, h.name\nhaving\n      total_score != 0\norder by \n      total_score desc,\n      hacker_id asc\n      ;","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"Binary Tree Nodes","code":"WITH RECURSIVE NodeTypes AS (\n  SELECT\n    N,\n    P,\n    CASE\n      WHEN P IS NULL THEN 'Root'\n      ELSE 'Inner'\n    END AS node_type\n  FROM\n    BST\n  WHERE\n    P IS NULL\n  \n  UNION ALL\n  \n  SELECT\n    b.N,\n    b.P,\n    CASE\n      WHEN EXISTS (SELECT 1 FROM BST c WHERE c.P = b.N) THEN 'Inner'\n      ELSE 'Leaf'\n    END AS node_type\n  FROM\n    BST b\n  JOIN\n    NodeTypes nt ON b.P = nt.N\n)\n\nSELECT\n  N AS node_value,\n  node_type\nFROM\n  NodeTypes\nORDER BY\n  N;\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"New Companies","code":"SELECT \n    C.company_code,\n    C.founder AS founder_name,\n    COUNT(DISTINCT LM.lead_manager_code) AS total_lead_managers,\n    COUNT(DISTINCT SM.senior_manager_code) AS total_senior_managers,\n    COUNT(DISTINCT M.manager_code) AS total_managers,\n    COUNT(DISTINCT E.employee_code) AS total_employees\nFROM \n    Company AS C\nLEFT JOIN \n    Lead_Manager AS LM ON C.company_code = LM.company_code\nLEFT JOIN \n    Senior_Manager AS SM ON LM.lead_manager_code = SM.lead_manager_code AND LM.company_code = SM.company_code\nLEFT JOIN \n    Manager AS M ON SM.senior_manager_code = M.senior_manager_code AND SM.company_code = M.company_code\nLEFT JOIN \n    Employee AS E ON M.manager_code = E.manager_code AND M.company_code = E.company_code\nGROUP BY \n    C.company_code, C.founder\nORDER BY \n    C.company_code;\n\n","score":1.0,"language":"mysql"},{"contest":"Master","challenge":"SQL Project Planning","code":"with cte as (\nselect\n    start_date,\n    end_date, \n    isnull(datediff(day, lag(end_date, 1) over (order by end_date), end_date), 2) as days, \n    DATEADD(day, -isnull(datediff(day, lag(end_date, 1) over (order by end_date), end_date), 2), end_date\n           ) as prj_end\nfrom projects ),\n\nCTE2 as (\n    select \n        start_date, \n        isnull(lead(prj_end, 1) over (order by prj_end), DATEADD(day, 1, start_date))  as prj_end_dt\n            from cte\n    where cte.days \u003c\u003e 1\n)\n\nselect start_date, \n        prj_end_dt\nfrom cte2\norder by Datediff(day, start_date, prj_end_dt) , start_date;","score":1.0,"language":"tsql"},{"contest":"Master","challenge":"Placements","code":"select s.name\n      from \n          students as s\n       join\n          friends as f \n       on \n          s.id = f.id\n       join  \n           packages as p1 \n       on  \n           f.friend_id = p1.id   \n        join \n            package as p2   \n        on \n            s.id = p2.id\nwhere \n      p1.salary \u003e p2.salary\norder by \n      p1.salary\n      ;","score":0.0,"language":"mysql"},{"contest":"Master","challenge":"Placements","code":"SELECT s.Name\nFROM Students s\nJOIN Friends f ON s.ID = f.ID\nJOIN Packages p1 ON f.Friend_ID = p1.ID\nJOIN Packages p2 ON s.ID = p2.ID\nWHERE p1.Salary \u003e p2.Salary\nORDER BY p1.Salary;\n","score":1.0,"language":"mysql"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[{"challenge":"New Companies","contest":"Master","code":"select company_code,\n       count(employee_code)\n  from employee\n  group by count;","language":"mysql"},{"challenge":"New Companies","contest":"Master","code":"select company_code,\n       count(employee_code) as total_employee\n  from employee;\n","language":"mysql"},{"challenge":"New Companies","contest":"Master","code":"SELECT \n    C.company_code,\n    C.founder_name,\n    COUNT(DISTINCT CASE WHEN E.employee_type = 'Lead Manager' THEN E.employee_id END) AS total_lead_managers,\n    COUNT(DISTINCT CASE WHEN E.employee_type = 'Senior Manager' THEN E.employee_id END) AS total_senior_managers,\n    COUNT(DISTINCT CASE WHEN E.employee_type = 'Manager' THEN E.employee_id END) AS total_managers,\n    COUNT(DISTINCT E.employee_id) AS total_employees\nFROM \n    Companies C\nJOIN \n    Employees E ON C.company_code = E.company_code\nGROUP BY \n    C.company_code, C.founder_name\nORDER BY \n    CAST(SUBSTRING_INDEX(C.company_code, '_', -1) AS UNSIGNED),\n    C.company_code;\n","language":"mysql"},{"challenge":"New Companies","contest":"Master","code":"SELECT \n    C.company_code,\n    C.founder_name,\n    COUNT(DISTINCT CASE WHEN E.employee_type = 'Lead Manager' THEN E.employee_id END) AS total_lead_managers,\n    COUNT(DISTINCT CASE WHEN E.employee_type = 'Senior Manager' THEN E.employee_id END) AS total_senior_managers,\n    COUNT(DISTINCT CASE WHEN E.employee_type = 'Manager' THEN E.employee_id END) AS total_managers,\n    COUNT(DISTINCT E.employee_id) AS total_employees\nFROM \n    Companies C\nJOIN \n    Employees E ON C.company_code = E.company_code\nGROUP BY \n    C.company_code, C.founder_name\nORDER BY \n    CAST(SUBSTRING_INDEX(C.company_code, '_', -1) AS UNSIGNED),\n    C.company_code\n    ;\n","language":"mysql"},{"challenge":"New Companies","contest":"Master","code":"SELECT \n    C.company_code,\n    C.founder AS founder_name,\n    COUNT(DISTINCT LM.lead_manager_code) AS total_lead_managers,\n    COUNT(DISTINCT SM.senior_manager_code) AS total_senior_managers,\n    COUNT(DISTINCT M.manager_code) AS total_managers,\n    COUNT(DISTINCT E.employee_code) AS total_employees\nFROM \n    Company AS C\nLEFT JOIN \n    Lead_Manager AS LM ON C.company_code = LM.company_code\nLEFT JOIN \n    Senior_Manager AS SM ON LM.lead_manager_code = SM.lead_manager_code AND LM.company_code = SM.company_code\nLEFT JOIN \n    Manager AS M ON SM.senior_manager_code = M.senior_manager_code AND SM.company_code = M.company_code\nLEFT JOIN \n    Employee AS E ON M.manager_code = E.manager_code AND M.company_code = E.company_code\nGROUP BY \n    C.company_code, C.founder\nORDER BY \n    C.company_code;\n\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"WITH ProjectDurations AS (\n  SELECT\n    Task_ID,\n    Start_Date,\n    End_Date,\n    DATEDIFF(End_Date, Start_Date) + 1 AS completion_days,\n    ROW_NUMBER() OVER (ORDER BY DATEDIFF(End_Date, Start_Date) + 1, Start_Date) AS project_rank\n  FROM\n    Projects\n)\n\nSELECT\n  Start_Date,\n  End_Date\nFROM\n  ProjectDurations\nORDER BY\n  completion_days,\n  Start_Date;\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"WITH ProjectCompletion AS (\n    SELECT\n        Task_ID,\n        Start_Date,\n        End_Date,\n        DATEDIFF(End_Date, Start_Date) + 1 AS completion_days,\n        ROW_NUMBER() OVER (PARTITION BY DATEDIFF(End_Date, Start_Date) ORDER BY Start_Date) AS project_order\n    FROM\n        Projects\n)\n\nSELECT\n    Start_Date,\n    End_Date\nFROM\n    ProjectCompletion\nORDER BY\n    completion_days ASC,\n    Start_Date ASC;\n\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"SELECT DISTINCT\n    Start_Date,\n    End_Date\nFROM\n    Projects\nORDER BY\n    Start_Date ASC,\n    End_Date ASC;\n\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"WITH ProjectGroups AS (\n    SELECT\n        Task_ID,\n        Start_Date,\n        End_Date,\n        SUM(IsStartOfProject) OVER (ORDER BY Start_Date, End_Date) AS ProjectGroup\n    FROM (\n        SELECT\n            Task_ID,\n            Start_Date,\n            End_Date,\n            CASE WHEN End_Date = LEAD(Start_Date) OVER (ORDER BY Start_Date, End_Date) THEN 0 ELSE 1 END AS IsStartOfProject\n        FROM\n            Projects\n    ) AS T\n)\n\nSELECT\n    MIN(Start_Date) AS Start_Date,\n    MAX(End_Date) AS End_Date\nFROM\n    ProjectGroups\nGROUP BY\n    ProjectGroup\nORDER BY\n    MIN(Start_Date) ASC;\n\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"select * from projects;\n\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"WITH ProjectCompletion AS (\n    SELECT \n        Task_ID,\n        Start_Date,\n        End_Date,\n        DATEDIFF(End_Date, Start_Date) + 1 AS completion_days\n    FROM \n        Projects\n)\n\nSELECT \n    Start_Date,\n    End_Date\nFROM \n    ProjectCompletion\nORDER BY \n    completion_days ASC,\n    Start_Date ASC;\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"SELECT \n    MIN(Start_Date) AS Start_Date,\n    MAX(End_Date) AS End_Date\nFROM (\n    SELECT \n        Task_ID,\n        Start_Date,\n        End_Date,\n        ROW_NUMBER() OVER (ORDER BY Start_Date) - ROW_NUMBER() OVER (ORDER BY End_Date) AS grp\n    FROM \n        Projects\n) AS temp\nGROUP BY \n    grp\nORDER BY \n    DATEDIFF(MAX(End_Date), MIN(Start_Date)) + 1 ASC,\n    MIN(Start_Date) ASC;\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"WITH ProjectGroups AS (\n    SELECT \n        Task_ID,\n        Start_Date,\n        End_Date,\n        ROW_NUMBER() OVER (ORDER BY Start_Date) - ROW_NUMBER() OVER (ORDER BY End_Date) AS group_number\n    FROM \n        Projects\n)\n\nSELECT \n    MIN(Start_Date) AS Start_Date,\n    MAX(End_Date) AS End_Date\nFROM \n    ProjectGroups\nGROUP BY \n    group_number\nORDER BY \n    DATEDIFF(MAX(End_Date), MIN(Start_Date)) + 1 ASC,\n    MIN(Start_Date) ASC;\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"WITH ProjectGroups AS (\n    SELECT \n        Task_ID,\n        Start_Date,\n        End_Date,\n        ROW_NUMBER() OVER (ORDER BY Start_Date) - ROW_NUMBER() OVER (ORDER BY End_Date) AS project_group\n    FROM \n        Projects\n)\n\nSELECT \n    MIN(Start_Date) AS Start_Date,\n    MAX(End_Date) AS End_Date\nFROM \n    ProjectGroups\nGROUP BY \n    project_group\nORDER BY \n    DATEDIFF(MAX(End_Date), MIN(Start_Date)) ASC,\n    MIN(Start_Date) ASC;\n\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"with cte as (\nselect\n    start_date,\n    end_date, \n    isnull(datediff(day, lag(end_date, 1) over (order by end_date), end_date), 2) as days, \n    DATEADD(day, -isnull(datediff(day, lag(end_date, 1) over (order by end_date), end_date), 2), end_date\n           ) as prj_end\nfrom projects ),\n\nCTE2 as (\n    select \n        start_date, \n        isnull(lead(prj_end, 1) over (order by prj_end), DATEADD(day, 1, start_date))  as prj_end_dt\n            from cte\n    where cte.days \u003c\u003e 1\n)\n\nselect start_date, \n        prj_end_dt\nfrom cte2\norder by Datediff(day, start_date, prj_end_dt) , start_date;\n","language":"mysql"},{"challenge":"SQL Project Planning","contest":"Master","code":"with cte as (\nselect\n    start_date,\n    end_date, \n    isnull(datediff(day, lag(end_date, 1) over (order by end_date), end_date), 2) as days, \n    DATEADD(day, -isnull(datediff(day, lag(end_date, 1) over (order by end_date), end_date), 2), end_date\n           ) as prj_end\nfrom projects ),\n\nCTE2 as (\n    select \n        start_date, \n        isnull(lead(prj_end, 1) over (order by prj_end), DATEADD(day, 1, start_date))  as prj_end_dt\n            from cte\n    where cte.days \u003c\u003e 1\n)\n\nselect start_date, \n        prj_end_dt\nfrom cte2\norder by Datediff(day, start_date, prj_end_dt) , start_date;","language":"tsql"},{"challenge":"Placements","contest":"Master","code":"SELECT s.Name\nFROM Students s\nJOIN Friends f ON s.ID = f.ID\nJOIN Packages p1 ON f.Friend_ID = p1.ID\nJOIN Packages p2 ON s.ID = p2.ID\nWHERE p1.Salary \u003e p2.Salary\nORDER BY p1.Salary;\n","language":"mysql"},{"challenge":"Placements","contest":"Master","code":"select s.name\n      from \n          students as s\n       join\n          friends as f \n       on \n          s.id = f.id\n       join  \n           packages as p1 \n       on  \n           f.friend_id = p1.id   \n        join \n            package as p2   \n        on \n            s.id = p2.id\nwhere \n      p1.salary \u003e p2.salary\norder by \n      p1.salary\n      ;","language":"mysql"},{"challenge":"Placements","contest":"Master","code":"SELECT s.Name\nFROM Students s\nJOIN Friends f ON s.ID = f.ID\nJOIN Packages p1 ON f.Friend_ID = p1.ID\nJOIN Packages p2 ON s.ID = p2.ID\nWHERE p1.Salary \u003e p2.Salary\nORDER BY p1.Salary;\n","language":"mysql"}],"contests_created":[]}